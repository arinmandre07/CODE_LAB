
1. Write a program on multiplication of matrix.

A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
B = [[4, 5, 6], [6, 7, 8], [2, 5, 6]]
result = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]


for i in range(len(A)):
    for j in range(len(B[0])):
        for k in range(len(B)):
            result[i][j] += A[i][k] * B[k][j]

print("Result:")
for r in result:
    print(r)





2. Write a Python program to sort n names using Quick sort algorithm. Discuss the complexity of the algorithm used.

def quick_sort(names):
    if len(names) <= 1:
        return names
    pivot = names[len(names) // 2]
    left = [x for x in names if x < pivot]
    middle = [x for x in names if x == pivot]
    right = [x for x in names if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

names = ["Komal", "Aradhya", "Ekansh", "Advik", "Aarohi", "Neha"]
sorted_names = quick_sort(names)
print(sorted_names)




3. Write a Python program to sort n numbers using Merge sort algorithm. Discuss the complexity of the algorithm used.

def merge_sort(numbers):
    if len(numbers) <= 1:
        return numbers
    mid = len(numbers) // 2
    left_half = numbers[:mid]
    right_half = numbers[mid:]
    left_half = merge_sort(left_half)  
    right_half = merge_sort(right_half)  
    return merge(left_half, right_half)

def merge(left, right):
    merged = []
    left_index = 0
    right_index = 0
    while left_index < len(left) and right_index < len(right):
        if left[left_index] < right[right_index]:
            merged.append(left[left_index])
            left_index += 1
        else:
            merged.append(right[right_index])
            right_index += 1
    merged.extend(left[left_index:])
    merged.extend(right[right_index:])
    return merged

numbers = [69, 84, 20, 12, 50, 40, 65]
sorted_numbers = merge_sort(numbers)
print(sorted_numbers)




4. Write a Python program for inserting an element into a binary tree.

class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

class BinaryTree:
    def __init__(self):
        self.root = None

    def insert(self, key):
        if self.root is None:
            self.root = Node(key)
        else:
            self.insert_recursively(self.root, key)

    def insert_recursively(self, current_node, key):
        if key < current_node.val:
            if current_node.left is None:
                current_node.left = Node(key)
            else:
                self.insert_recursively(current_node.left, key)
        else:
            if current_node.right is None:
                current_node.right = Node(key)
            else:
                self.insert_recursively(current_node.right, key)

    def inorder_traversal(self, node):
        if node:
            self.inorder_traversal(node.left)
            print(node.val, end=' ')
            self.inorder_traversal(node.right)

if __name__ == "__main__":
    bt = BinaryTree()
    bt.insert(20)
    bt.insert(5)
    bt.insert(10)
    bt.insert(13)
    bt.insert(4)
    
    print("Inorder traversal of the binary tree:")
    bt.inorder_traversal(bt.root)



5. Write a Python program for deleting an element (assuming data is given) from a binary tree.

class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

class BinaryTree:
    def __init__(self):
        self.root = None

    def insert(self, key):
        if self.root is None:
            self.root = Node(key)
        else:
            self._insert_recursively(self.root, key)

    def _insert_recursively(self, current_node, key):
        if key < current_node.val:
            if current_node.left is None:
                current_node.left = Node(key)
            else:
                self._insert_recursively(current_node.left, key)
        else:
            if current_node.right is None:
                current_node.right = Node(key)
            else:
                self._insert_recursively(current_node.right, key)

    def inorder_traversal(self, node):
        if node:
            self.inorder_traversal(node.left)
            print(node.val, end=' ')
            self.inorder_traversal(node.right)

    def find_min(self, node):
        current = node
        while current.left is not None:
            current = current.left
        return current

    def delete_node(self, key):
        self.root = self._delete_node_recursive(self.root, key)

    def _delete_node_recursive(self, node, key):
        if node is None:
            return node

        if key < node.val:
            node.left = self._delete_node_recursive(node.left, key)
        elif key > node.val:
            node.right = self._delete_node_recursive(node.right, key)
        else:
            # Node to be deleted found
            if node.left is None:
                return node.right
            elif node.right is None:
                return node.left
            # Node with two children: get the inorder successor
            min_node = self.find_min(node.right)
            node.val = min_node.val
            node.right = self._delete_node_recursive(node.right, min_node.val)

        return node

# Example Usage
if __name__ == "__main__":
    bt = BinaryTree()
    bt.insert(20)
    bt.insert(5)
    bt.insert(10)
    bt.insert(13)
    bt.insert(4)

    print("Inorder traversal of the binary tree:")
    bt.inorder_traversal(bt.root)

    bt.delete_node(10)
    print("\nInorder traversal after deleting node 10:")
    bt.inorder_traversal(bt.root)


6. Write a Python program for checking whether a given graph G has a simple path from sources to destination d. Assume the graph G is represented using an adjacency matrix.


from collections import defaultdict

class Graph:
    def __init__(self, nodes):
        self.N = nodes
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)

    def find_path(self, src, dest):
        visited = [False] * self.N
        queue = []
        queue.append(src)
        visited[src] = True

        while queue:
            node = queue.pop(0)
            if node == dest:
                return True
            for neighbor in self.graph[node]:
                if not visited[neighbor]:
                    queue.append(neighbor)
                    visited[neighbor] = True

        return False

# Create a graph with 5 nodes
g = Graph(5)
g.add_edge(0, 1)
g.add_edge(1, 2)
g.add_edge(3, 3)
g.add_edge(4, 2)
g.add_edge(1, 0)

# Test if a path exists between nodes
u = 0
v = 2
if g.find_path(u, v):
    print(f"There is a path from node {u} to node {v}")
else:
    print(f"There is no path from node {u} to node {v}")

# Another test case
u = 3
v = 2
if g.find_path(u, v):
    print(f"There is a path from node {u} to node {v}")
else:
    print(f"There is no path from node {u} to node {v}")


7. Write a Python program for finding the smallest and largest elements in an array A of size n using the Selection algorithm. Discuss Time complexity

a = [85, 45, 66, 15, 34]
print("Array a is", a)

for i in range(len(a)):
    min_ind = i
    for j in range(i+1, len(a)): 
        if a[min_ind] > a[j]:
            min_ind = j
    # Swap elements
    a[i], a[min_ind] = a[min_ind], a[i]
    
    print(f"Iteration {i+1}: {a}")  

print("Smallest element: %d" % a[0])
print("Greatest element: %d" % a[len(a)-1])  


8. Write a Python program for finding the second largest element in an array A of size n using Tournament Method. Discuss Time complexity.

def second_largest(arr):
    if len(arr) < 2:
        return None
    
    largest = second_largest = None
    
    for num in arr:
        if largest is None or num > largest:
            second_largest = largest
            largest = num
        elif num != largest and (second_largest is None or num > second_largest):
            second_largest = num
    
    return second_largest

A = [3, 2, 6, 4, 1, 5]
result = second_largest(A)

print("Array: A", A)
print("The second largest element is:", result)



9. Write a Python program for implementing Huffman Coding Algorithm. Discuss the complexity of the algorithm.

import heapq

class HeapNode:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    def __lt__(self, other):
        return self.freq < other.freq

class HuffmanCoding:
    def __init__(self, text):
        self.text = text
        self.heap = []
        self.codes = {}
        self.reverse_mapping = {}

    def make_frequency_dict(self, text):
        frequency = {}
        for character in text:
            if character not in frequency:
                frequency[character] = 0
            frequency[character] += 1
        return frequency

    def make_heap(self, frequency):
        for key in frequency:
            node = HeapNode(key, frequency[key])
            heapq.heappush(self.heap, node)

    def merge_nodes(self):
        while len(self.heap) > 1:
            node1 = heapq.heappop(self.heap)
            node2 = heapq.heappop(self.heap)
            merged = HeapNode(None, node1.freq + node2.freq)
            merged.left = node1
            merged.right = node2
            heapq.heappush(self.heap, merged)

    def make_codes_helper(self, root, current_code):
        if root is None:
            return
        if root.char is not None:
            self.codes[root.char] = current_code
            self.reverse_mapping[current_code] = root.char
            return

        self.make_codes_helper(root.left, current_code + "0")
        self.make_codes_helper(root.right, current_code + "1")

    def make_codes(self):
        root = heapq.heappop(self.heap)
        current_code = ""
        self.make_codes_helper(root, current_code)

    def get_encoded_text(self, text):
        encoded_text = ""
        for character in text:
            encoded_text += self.codes[character]
        return encoded_text

    def encode(self):
        frequency = self.make_frequency_dict(self.text)
        self.make_heap(frequency)
        self.merge_nodes()
        self.make_codes()
        encoded_text = self.get_encoded_text(self.text)
        return encoded_text

# Driver code
instr = input("Enter the string to encode: ")
h = HuffmanCoding(instr)
encoded_string = h.encode()
print("Encoded string is:", encoded_string)

# Printing Huffman Codes for each character
print("Huffman Code for each character of the string:")
print("Symbol\tWeight\tHuffman Code")
for char in h.codes:
    print(f"{char}\t{h.codes[char]}")


10. Write a Python program for implementing Strassen's Matrix multiplication using Divide and Conquer method. Discuss the complexity of algorithm


import numpy as np

def strassen(a, b):
    # Base case for 1x1 matrix
    if len(a) == 1:
        return a * b

    # Split the matrices into quarters
    mid = len(a) // 2
    a11 = a[:mid, :mid]
    a12 = a[:mid, mid:]
    a21 = a[mid:, :mid]
    a22 = a[mid:, mid:]

    b11 = b[:mid, :mid]
    b12 = b[:mid, mid:]
    b21 = b[mid:, :mid]
    b22 = b[mid:, mid:]

    # Compute the 7 products using Strassen's formula
    s1 = b12 - b22
    s2 = a11 + a12
    s3 = a21 + a22
    s4 = b21 - b11
    s5 = a11 + a22
    s6 = b11 + b22
    s7 = a12 - a22

    p1 = strassen(a11, s1)
    p2 = strassen(s2, b22)
    p3 = strassen(s3, b11)
    p4 = strassen(a22, s4)
    p5 = strassen(s5, s6)
    p6 = strassen(s7, b21)
    p7 = strassen(a12, s3)

    # Combine the results into the final matrix
    c11 = p5 + p4 - p2 + p6
    c12 = p1 + p2
    c21 = p3 + p4
    c22 = p5 + p1 - p3 - p7

    # Combine the quadrants into the final result
    result = np.zeros((len(a), len(b[0])))
    result[:mid, :mid] = c11
    result[:mid, mid:] = c12
    result[mid:, :mid] = c21
    result[mid:, mid:] = c22

    return result

# Example matrices
x = np.array([[0, 2], [0, 1]])
y = np.array([[0, 0], [3, 4]])

print("Matrix x is:")
for row in x:
    print("\t", row)

print("Matrix y is:")
for row in y:
    print("\t", row)

result = strassen(x, y)

print("Strassen's Matrix multiplication of x and y is:")
for row in result:
    print("\t", row)
