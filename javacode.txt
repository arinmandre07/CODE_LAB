1. Write a program to find the average and sum of the Numbers Using Command line argument.

public class CalculateSumAndAverage {
    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.println("Please provide numbers as command-line arguments.");
            return;
        }

        double sum = 0.0;
        try {
            for (String arg : args) {
                sum += Double.parseDouble(arg);
            }
        } catch (NumberFormatException e) {
            System.out.println("Error: Please ensure all command-line arguments are valid numbers.");
            return;
        }

        double average = sum / args.length;
        System.out.println("Sum of numbers: " + sum);
        System.out.println("Average of numbers: " + average);
    }
}


2. Write a program to demonstrate Type Casting.

1. Narrowing Casting
public class NarrowingTypeCasting {
    public static void main(String[] args) {
        double d = 12.44;   
        long l = (long) d;  
        int i = (int) l;    

        // Print the values before and after type conversions
        System.out.println("Before conversion, the double value: " + d);
        System.out.println("After conversion to long value: " + l);
        System.out.println("After conversion to int value: " + i);
    }
}


2. Widening Type casting

public class WideningTypeCasting {
    public static void main(String[] args) {
        int a = 5;          
        long b = a;          
        double db = b;       

        // Print the values before and after type conversions
        System.out.println("Before conversion, the int value: " + a);
        System.out.println("After conversion to long value: " + b);
        System.out.println("After conversion to double value: " + db);
    }
}


3. Write a program to design a class account using the inheritance and static that show all functions of the bank (withdrawal, deposit).

public class Account {
    private String accountHolderName;
    private double balance;

    
    public Account(String name, double initialBalance) {
        accountHolderName = name;
        balance = initialBalance; 
    }


    public void deposit(double amount) {
        balance += amount; 
    }

    
    public void withdraw(double amount) {
        balance -= amount; 
    }

    
    public void displayAccountInfo() {
        System.out.println("Account Holder Name: " + accountHolderName);
        System.out.println("Balance: " + balance);
    }

   
    public static void main(String[] args) {
        Account account = new Account("Arin", 1000.0);  
        account.displayAccountInfo();  

        account.deposit(500.0);  
        account.displayAccountInfo();  

        account.withdraw(200.0); 
        account.displayAccountInfo();  
    }
}


4. Write a program to design a class using abstract Methods and Classes.

class StudentName {
    String name;

    StudentName(String name) {
        this.name = name;
    }

    void displayInfo() {
        System.out.println("Student name: " + name);
    }
}

class Student extends StudentName {
    int rollNumber;

    Student(String name, int rollNumber) {
        super(name);  
        this.rollNumber = rollNumber;
    }

    void displayInfo() {
        super.displayInfo(); 
        System.out.println("Roll Number: " + rollNumber);  
    }
}

public class Main {
    public static void main(String[] args) {
      
        Student student = new Student("Arin", 1234);
        student.displayInfo();  
    }
}


5. Write a program to handle the Exception using try and multiple catch blocks.

public class ErrorHandling {
    public static void main(String[] args) {
        try {
            int num1 = 10;
            int num2 = 0;
            int result = num1 / num2;  
            System.out.println("Result: " + result); 
            String str = null;
            System.out.println(str.length());  
            int[] arr = new int[5];
            System.out.println(arr[10]); 
        } catch (ArithmeticException e) {
            System.out.println("Arithmetic Error: " + e.getMessage());
        } catch (NullPointerException e) {
            System.out.println("Null Pointer Error: " + e.getMessage());
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Array Index Error: " + e.getMessage());
        } catch (Exception e) {
            System.out.println("Unknown Error: " + e.getMessage());
        }
    }
}


6. Write a program to Create a package that accesses the member of the external class as well as the same package.

package mypackage;

class ExternalClass {
    public static void externalMethod() {
        System.out.println("This is an external method");
    }
}

class MyOtherClass {
    public static void myMethod() {
        System.out.println("This is a method in the same package");
    }
}

public class MyClass {
    public static void main(String[] args) {
        ExternalClass.externalMethod(); 
        MyOtherClass.myMethod();        
    }
}


7. Write a program to create a thread that implements the Runnable interface.

public class CustomRunnableThread implements Runnable {
    @Override
    public void run() {
        for (int i = 0; i < 5; i++) {
            System.out.println("Thread is running... " + i);
        }
    }

    public static void main(String[] args) {
        CustomRunnableThread customThread = new CustomRunnableThread();  
        Thread thread = new Thread(customThread);  
        thread.start();  
    }
}


8. AWT and SWING :

(i) Write a program to create a form of ATM busing AWT.

import java.awt.*;
import java.awt.event.*;

public class ATMForm {
    public static void main(String[] args) {
        Frame frame = new Frame("ATM FORM");
        frame.setSize(400, 600);
        frame.setLayout(new GridLayout(0, 2));

        // Name
        Label nameLabel = new Label("Name:");
        TextField nameField = new TextField(20);
        frame.add(nameLabel);
        frame.add(nameField);

        // Address
        Label addressLabel = new Label("Address:");
        TextField addressField = new TextField(20); // Fixed the syntax here
        frame.add(addressLabel);
        frame.add(addressField);

        // State
        Label stateLabel = new Label("State:");
        TextField stateField = new TextField(20); // Fixed the syntax here
        frame.add(stateLabel);
        frame.add(stateField);

        // Pincode
        Label pincodeLabel = new Label("Pincode:");
        TextField pincodeField = new TextField(20); // Fixed the syntax here
        frame.add(pincodeLabel);
        frame.add(pincodeField);

        // Telephone
        Label telephoneLabel = new Label("Telephone:");
        TextField telephoneField = new TextField(20); // Fixed the syntax here
        frame.add(telephoneLabel);
        frame.add(telephoneField);

        // Date of Birth
        Label dobLabel = new Label("Date of Birth:");
        TextField dobField = new TextField(20); // Fixed the syntax here
        frame.add(dobLabel);
        frame.add(dobField);

        // Gender
        Label genderLabel = new Label("Gender:");
        CheckboxGroup genderGroup = new CheckboxGroup();
        Checkbox maleCheckbox = new Checkbox("Male", genderGroup, false);
        Checkbox femaleCheckbox = new Checkbox("Female", genderGroup, false);
        Checkbox otherCheckbox = new Checkbox("Other", genderGroup, false);
        Panel genderPanel = new Panel();
        genderPanel.add(maleCheckbox);
        genderPanel.add(femaleCheckbox);
        genderPanel.add(otherCheckbox);
        frame.add(genderLabel);
        frame.add(genderPanel);

        // Account Type
        Label accountTypeLabel = new Label("Account Type:");
        CheckboxGroup accountTypeGroup = new CheckboxGroup(); // Fixed the variable name
        Checkbox savingsCheckbox = new Checkbox("Savings", accountTypeGroup, false);
        Checkbox currentCheckbox = new Checkbox("Current", accountTypeGroup, false);
        Panel accountTypePanel = new Panel();
        accountTypePanel.add(savingsCheckbox);
        accountTypePanel.add(currentCheckbox);
        frame.add(accountTypeLabel);
        frame.add(accountTypePanel);

        // Account Number
        Label accountNumberLabel = new Label("Account Number:");
        TextField accountNumberField = new TextField(20); // Fixed the syntax here
        frame.add(accountNumberLabel);
        frame.add(accountNumberField);

        // Email
        Label emailLabel = new Label("Email:");
        TextField emailField = new TextField(20); // Fixed the syntax here
        frame.add(emailLabel);
        frame.add(emailField);

        // Submit Button
        Button submitButton = new Button("Submit");
        frame.add(new Label());
        frame.add(submitButton);

        submitButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.out.println("Form Submitted");
                System.out.println("Name: " + nameField.getText());
                System.out.println("Address: " + addressField.getText());
                System.out.println("State: " + stateField.getText());
                System.out.println("Pincode: " + pincodeField.getText());
                System.out.println("Telephone: " + telephoneField.getText());
                System.out.println("DOB: " + dobField.getText());
                System.out.println("Gender: " + genderGroup.getSelectedCheckbox().getLabel());
                System.out.println("Account Type: " + accountTypeGroup.getSelectedCheckbox().getLabel());
                System.out.println("Account Number: " + accountNumberField.getText());
                System.out.println("Email: " + emailField.getText());
            }
        });

        frame.setVisible(true);
    }
}



(ii) Write a program to create a form by using swing.


package pom.mycompany.registerform;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class RegisterForm {
    public static void main(String[] args) {
        JFrame f = new JFrame("Registration Form");
        f.setSize(400, 350);
        f.setLayout(null);


        JLabel nameLabel = new JLabel("Name:");
        nameLabel.setBounds(10, 20, 50, 25);
        f.add(nameLabel);
        JTextField nameText = new JTextField(20);
        nameText.setBounds(150, 20, 165, 25);
        f.add(nameText);

     
        JLabel dobLabel = new JLabel("Date of Birth:");
        dobLabel.setBounds(10, 50, 100, 25);
        JTextField dobText = new JTextField(20);
        dobText.setBounds(150, 50, 165, 25);
        f.add(dobLabel);
        f.add(dobText);


        JLabel addressLabel = new JLabel("Address:");
        addressLabel.setBounds(10, 80, 80, 25);
        JTextField addressText = new JTextField(20);
        addressText.setBounds(150, 80, 165, 25);
        f.add(addressLabel);
        f.add(addressText);

      
        JLabel phoneLabel = new JLabel("Phone Number:");
        phoneLabel.setBounds(10, 110, 100, 25);
        JTextField phoneText = new JTextField(20);
        phoneText.setBounds(150, 110, 165, 25);
        f.add(phoneLabel);
        f.add(phoneText);

   
        JLabel genderLabel = new JLabel("Gender:");
        genderLabel.setBounds(10, 140, 80, 25);
        JRadioButton maleRadio = new JRadioButton("Male");
        maleRadio.setBounds(150, 140, 70, 25);
        JRadioButton femaleRadio = new JRadioButton("Female");
        femaleRadio.setBounds(220, 140, 80, 25);
        JRadioButton otherRadio = new JRadioButton("Other");
        otherRadio.setBounds(300, 140, 70, 25);

        ButtonGroup genderGroup = new ButtonGroup();
        genderGroup.add(maleRadio);
        genderGroup.add(femaleRadio);
        genderGroup.add(otherRadio);

        f.add(genderLabel);
        f.add(maleRadio);
        f.add(femaleRadio);
        f.add(otherRadio);

     
        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setBounds(10, 170, 80, 25);
        JTextField emailText = new JTextField(20);
        emailText.setBounds(150, 170, 165, 25);
        f.add(emailLabel);
        f.add(emailText);

       
        JButton submitButton = new JButton("Submit");
        submitButton.setBounds(10, 210, 150, 25);
        f.add(submitButton);

     
        submitButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.out.println("Form Submitted");
                System.out.println("Name: " + nameText.getText());
                System.out.println("Date of Birth: " + dobText.getText());
                System.out.println("Address: " + addressText.getText());
                System.out.println("Phone Number: " + phoneText.getText());
                System.out.println("Gender: " + (maleRadio.isSelected() ? "Male" :
                        femaleRadio.isSelected() ? "Female" : "Other"));
                System.out.println("Email: " + emailText.getText());

       
                nameText.setText("");
                dobText.setText("");
                addressText.setText("");
                phoneText.setText("");
                genderGroup.clearSelection();
                emailText.setText("");
            }
        });

        
        f.setVisible(true);
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
}




