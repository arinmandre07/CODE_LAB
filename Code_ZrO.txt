1. Write an R script to do the following:
a) simulate a sample of 100 random data points from a normal
distribution with mean 100 and standard deviation 5 and store the
result in a vector.
b) visualise the vector created above using different plots.
c) test the hypothesis that the mean equals 100.
d) use wilcoxon test to test the hypothesis that mean equals 90.


Ans.

set.seed(123)
data <- rnorm(100, mean = 100, sd = 5)

hist(data, main = "Histogram")
boxplot(data, main = "Boxplot")
plot(density(data), main = "Density Plot")





2. Using the Algae data set from package DMwR to complete the following tasks.
a) create a graph that you find adequate to show the distribution of the values
of algae a6.
b) show the distribution of the values of size 3.
c) check visually if oPO4 follows a normal distribution.
d) produce a graph that allows you to understand how the values of NO3 are
distributed across the sizes of rivers.
e) using a graph check if the distribution of algae a1 varies with the speed of
the river.
f) visualise the relationship between the frequencies of algae a1 and a6. Give
the appropriate graph title, x-axis and y-axis title.


Ans. 

install.packages("DMWR2")
library(DMWR2)
View(algae)
hist(algae$Sa6, 
     main = "Histogram Algae A6", 
     xlab = "Algae A6", 
     ylab = "Frequency", 
     col = "Red")
d <- algae$Sa6[algae$size == "large"]
hist(d[d > 3], 
     main = "Value higher than 3", 
     xlab = "Algae A6", 
     ylab = "Frequency", 
     col = "Red")





3. Read the file Coweeta.CSV and write an R script to do the
following:
a) count the number of observations per species.
b) take a subset of the data including only those species with at least
10 observations.
c) make a scatter plot of biomass versus height, with the symbol color
varying by species, and use filled squares for the symbols. Also add a
title to the plot, in italics.
d) log-transform biomass, and redraw the plot.


Ans. 

library(readr)
coweeta <- read_csv("C:/Users/Admin/Downloads/coweeta.csv")
table(coweeta$species)
sub_c <- subset(coweeta, ave(coweeta$species, coweeta$species, FUN = length) >= 10)
colour <- as.numeric(factor(sub_c$species))
plot(sub_c$height, sub_c$biomass,
     pch = 15, 
     col = colour,
     main = expression(bold("Scatter Plot Biomass v/s Height")))






4. The built-in data set of mammals contains data on body weight versus
brain weight. Write R commands to:
a) Find the Pearson and Spearman correlation coefficients. Are they
similar?
b) Plot the data using the plot command .
c) Plot the logarithm (log) of each variable and see if that makes a difference.

Ans.

install.packages("MASS")
library(MASS)

data("mammals")
View(mammals)

pearson_corr <- cor(mammals$brain, mammals$body, method = "pearson")
spearman_corr <- cor(mammals$brain, mammals$body, method = "spearman")

print(paste("Pearson correlation coefficient:", pearson_corr))
print(paste("Spearman correlation coefficient:", spearman_corr))

if (pearson_corr == spearman_corr) {
  print(paste("Pearson and Spearman are equal:", pearson_corr, "=", spearman_corr))
} else {
  print(paste("Pearson and Spearman are not equal:", pearson_corr, "!=", spearman_corr))
}

colour <- as.numeric(mammals$body)
plot(log(mammals$body), log(mammals$brain), 
     xlab = "Body", 
     ylab = "Brain", 
     col = colour, 
     main = expression(bold(underline("Plot of Mammals"))))



5. In the library MASS is a dataset UScereal which contains information
about popular breakfast cereals. Attach the data set and use different
kinds of plots to investigate the following relationships:
a) relationship between manufacturer and shelf
b) relationship between fat and vitamins
c) relationship between fat and shelf
d) relationship between carbohydrates and sugars
e) relationship between fibre and manufacturer
f) relationship between sodium and sugars 



Ans. 

library(MASS)
data("UScereal")
View(UScereal)

plot(UScereal$mfr, UScereal$shelf, 
     xlab = "Manufacturer", 
     ylab = "Shelf", 
     main = "Relationship between Mfr and Shelf")

boxplot(UScereal$fat, UScereal$vitamins, 
        xlab = "Fat", 
        ylab = "Vitamins", 
        main = "Relationship between Fat and Vitamins")

plot(UScereal$fat, UScereal$shelf, 
     xlab = "Fat", 
     ylab = "Shelf", 
     main = "Relationship between Fat and Shelf")

boxplot(UScereal$carbo, UScereal$sugars, 
        xlab = "Carbs", 
        ylab = "Sugars", 
        main = "Relationship between Carbs and Sugars")

plot(UScereal$fibre, UScereal$mfr, 
     xlab = "Fiber", 
     ylab = "Manufacturer", 
     main = "Relationship between Fiber and Manufacturer")

boxplot(UScereal$sodium, UScereal$sugars, 
        xlab = "Sodium", 
        ylab = "Sugars", 
        main = "Relationship between Sodium and Sugars")





6.Write R script to:
a) Do two simulations of a binomial number with n = 100 and p = .5. Do
you get the same results each time? What is different? What is similar?
b) Do a simulation of the normal two times. Once with n = 10, μ = 10 and σ =
10, the other with n = 10, μ = 100 and σ = 100. How are they different? How are
they similar? Are both approximately normal?



Ans. 

set.seed(123)
sim1 <- rbinom(1000, size = 100, prob = 0.5)
sim2 <- rbinom(n = 1000, size = 100, prob = 0.5)
summary(sim1)
sd(sim1)

summary(sim2)
sd(sim2)

n1 <- rnorm(n = 10, mean = 10, sd = 10)
n2 <- rnorm(n = 10, mean = 500, sd = 500)
n1
n2




7. Create a database of medicines that contains the details about
medicines such as {manufacturer, composition, price}. Create an
interactive application using which the user can find an alternative to a
given medicine with the same composition.



Ans. 


medicines <- data.frame(
  mfg = c("Cipla", "KS", "Mankind", "Apila", "Maptle"),
  comp = c("Ibuprofen", "Aspirin", "Dolo 650", "Neprosin", "Dolo 650"),
  price = c(5, 60, 80, 50, 52)
)

find_alternatives <- function(med_name) {
  alternatives <- medicines[medicines$comp == med_name, ]
  if (nrow(alternatives) == 0) {
    message("No alternatives found for", med_name)
  } else {
    message("Alternatives for ", med_name, ":")
    print(alternatives)
  }
}

library(shiny)

ui <- fluidPage(
  titlePanel("Alternative Medicines"),
  sidebarLayout(
    sidebarPanel(
      textInput("med_name", "Enter medicine composition:", placeholder = "e.g. Ibuprofen")
    ),
    mainPanel(
      verbatimTextOutput("meds")
    )
  )
)

server <- function(input, output) {
  output$meds <- renderPrint({
    find_alternatives(input$med_name)
  })
}

shinyApp(ui, server)





8. Create a database of songs that contains the fields {song_name, mood,
online_link_play_song}.
Create an application where the mood of the user is given as input
and the list of songs corresponding to that mood appears as the
output. The user can listen to any song from the list via the online
link given.



Ans. 

songs <- data.frame(
  song_name = c("Happy", "Uptown Funk", "Can't Stop the Feeling!", "Sweet but Psycho", "Senorita", "Sore Mood"),
  mood = c("Happy", "Happy", "Happy", "Angry", "Romantic", "Sad", "Sad", "Happy", "Sad", "Empowered"),
  online_link = c(
    "https://www.youtube.com/watch?v=dQw4w9wgXcQ",
    "https://www.youtube.com/watch?v=VIP18CzNzCQ",
    "https://www.youtube.com/watch?v=0PfΟΥ Χαρκο",
    "https://www.youtube.com/watch?v=zUwOFmbwRIE",
    "https://www.youtube.com/watch?v=bayNZFDFWOI",
    "https://www.youtube.com/watch?v=J7hqVxvbPVk",
    "https://www.youtube.com/watch?v=Tg0OYEZNRHU",
    "https://www.youtube.com/watch?v=iEvTxjbugiva",
    "https://www.youtube.com/watch?v=UJLNgVyXX6A",
    "https://www.youtube.com/watch?v=h6EbpM6hZqk"
  )
)

find_songs <- function(mood) {
  songs_matching_mood <- songs[songs$mood == mood, ]
  if (nrow(songs_matching_mood) == 0) {
    message("No songs found for mood", mood)
  } else {
    message("Songs for mood", mood, ":")
    print(songs_matching_mood)
  }
}

library(shiny)

ui <- fluidPage(
  titlePanel("Mood-Based Song Recommendations"),
  sidebarLayout(
    sidebarPanel(
      textInput("mood", "Enter your mood:", placeholder = "e.g. Happy, Sad, Angry, etc.")
    ),
    mainPanel(
      verbatimTextOutput("songs")
    )
  )
)

server <- function(input, output) {
  output$songs <- renderPrint({
    find_songs(input$mood)
  })
}

shinyApp(ui, server)





9. Create a package in R to perform certain basic statistics functions.
Chapter 8 R Packages | An Introduction to Statistical Programming
Methods with R Writing R packages in Rstudio.


Ans.

mean_function <- function(x) {
  return(mean(x, na.rm = TRUE))
}

median_function <- function(x) {
  return(median(x, na.rm = TRUE))
}

sd_function <- function(x) {
  return(sd(x, na.rm = TRUE))
}



Checking Package

data <- c(20, 30, 40, 50, 60, NA)
mean_value <- mean_function(data)
median_value <- median_function(data)
sd_value <- sd_function(data)

print(paste("Mean:", mean_value))
print(paste("Median:", median_value))
print(paste("Standard Deviation:", sd_value))





10. 



Vector

#VECTORS
apple = c("red", "green", "yellow")
print(apple)
print(class(apple))



Matrices

M <- matrix(c('a', 'a', 'b', 'c', 'b', 'a'), nrow = 2, ncol = 3, byrow = TRUE)
print(M)



Arrays

a <- array(c("green", "red", "yellow"), dim = c(3, 3, 2))
print(a)



Factors

apple_colors <- c("green", "green", "yellow")
factor_apple <- factor(apple_colors)
print(factor_apple)
print(nlevels(factor_apple))



Data Frames

BMI <- data.frame(
  gender = c('Male', 'Male', 'Female'),
  height = c(152, 171.5, 165),
  weight = c(81, 93, 78),
  Age = c(42, 38, 26)
)
print(BMI)



Basic Mathematical Functions


head(mtcars)
summary(mtcars)
sd(mtcars$hp)
var(mtcars$hp)
min(mtcars$hp)
max(mtcars$hp)
mean(mtcars$hp)
pc_cor <- cor(mtcars$hp, mtcars$wt, method = "pearson")
pc_cor
sc_cor <- cor(mtcars$hp, mtcars$wt, method = "spearman")
sc_cor
cov(mtcars$hp, mtcars$wt)
cor(mtcars$hp, mtcars$wt)
q1 <- quantile(mtcars$drat, 0.25)
q2 <- quantile(mtcars$drat, 0.50)
q3 <- quantile(mtcars$drat, 0.75)
iqr <- q3 - q1


Write an R script that performs statistical analysis on a
dataset. Your script should visualize the data using the
following types of plots:
● Scatter plot
● Line plot
● Bar chart
● Histogram
● Boxplot
The script should help in summarizing and understanding the
data effectively.


Ans.


# Creating the data frame
data <- data.frame(x = 1:9, y = c(6, 8, 12, 16, 17, 21, 23, 25, 28))

# Calculations
mean_y <- mean(data$y)
median_y <- median(data$y)
variance_y <- var(data$y)
sd_y <- sd(data$y)
cov_xy <- cov(data$x, data$y)
cor_xy <- cor(data$x, data$y)
sum_y <- sum(data$y)

# Printing results
cat("Mean of y:", mean_y, "\n")
cat("Median of y:", median_y, "\n")
cat("Variance of y:", variance_y, "\n")
cat("Standard Deviation of y:", sd_y, "\n")
cat("Covariance of x and y:", cov_xy, "\n")
cat("Correlation between x and y:", cor_xy, "\n")
cat("Sum of y values:", sum_y, "\n")

# Plots
plot(data$x, data$y, main = "Scatter Plot", xlab = "x values", ylab = "y values", pch = 19)
plot(data$x, data$y, type = "o", main = "Line Plot", xlab = "x values", ylab = "y values", col = "blue")
barplot(data$y, names.arg = data$x, main = "Bar chart", xlab = "x values", ylab = "y values", col = "lightblue")
hist(data$y, main = "Histogram of y values", xlab = "y values", col = "lightgreen")
boxplot(data$y, main = "Box Plot of y values", ylab = "y values", col = "gold")
